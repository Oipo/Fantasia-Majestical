/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.1 on Fri Dec 24 17:16:24 2010
 */

#include "sipAPI_bmainmod.h"

#line 83 "bMain.sip"
#include "bImage.h"
#line 12 "sip_bmainmodbImage.cpp"

#line 41 "/usr/share/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "sip_bmainmodbImage.cpp"


extern "C" {static PyObject *meth_bImage_getId(PyObject *, PyObject *);}
static PyObject *meth_bImage_getId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getX(PyObject *, PyObject *);}
static PyObject *meth_bImage_getX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getX();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getX, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getY(PyObject *, PyObject *);}
static PyObject *meth_bImage_getY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getY();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getY, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getW(PyObject *, PyObject *);}
static PyObject *meth_bImage_getW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getW();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getW, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getH(PyObject *, PyObject *);}
static PyObject *meth_bImage_getH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getH();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getH, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getDrawW(PyObject *, PyObject *);}
static PyObject *meth_bImage_getDrawW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getDrawW();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getDrawW, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getDrawH(PyObject *, PyObject *);}
static PyObject *meth_bImage_getDrawH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getDrawH();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getDrawH, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getTile(PyObject *, PyObject *);}
static PyObject *meth_bImage_getTile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getTile();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getTile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getLayer(PyObject *, PyObject *);}
static PyObject *meth_bImage_getLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getLayer();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getLayer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getHidden(PyObject *, PyObject *);}
static PyObject *meth_bImage_getHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getHidden();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getFilename(PyObject *, PyObject *);}
static PyObject *meth_bImage_getFilename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->getFilename());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getFilename, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getTilesetId(PyObject *, PyObject *);}
static PyObject *meth_bImage_getTilesetId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getTilesetId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getTilesetId, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getTilesetW(PyObject *, PyObject *);}
static PyObject *meth_bImage_getTilesetW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getTilesetW();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getTilesetW, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_getTilesetH(PyObject *, PyObject *);}
static PyObject *meth_bImage_getTilesetH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getTilesetH();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_getTilesetH, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setX(PyObject *, PyObject *);}
static PyObject *meth_bImage_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setX(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setX, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setY(PyObject *, PyObject *);}
static PyObject *meth_bImage_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setY(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setY, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setW(PyObject *, PyObject *);}
static PyObject *meth_bImage_setW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setW(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setW, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setH(PyObject *, PyObject *);}
static PyObject *meth_bImage_setH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setH(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setH, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setDrawW(PyObject *, PyObject *);}
static PyObject *meth_bImage_setDrawW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDrawW(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setDrawW, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setDrawH(PyObject *, PyObject *);}
static PyObject *meth_bImage_setDrawH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDrawH(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setDrawH, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setTile(PyObject *, PyObject *);}
static PyObject *meth_bImage_setTile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTile(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setTile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setLayer(PyObject *, PyObject *);}
static PyObject *meth_bImage_setLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayer(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setLayer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_setHidden(PyObject *, PyObject *);}
static PyObject *meth_bImage_setHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_bImage, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHidden(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_setHidden, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bImage_DELETEME(PyObject *, PyObject *);}
static PyObject *meth_bImage_DELETEME(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bImage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bImage, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->DELETEME();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bImage, sipName_DELETEME, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_bImage(void *, const sipTypeDef *);}
static void *cast_bImage(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_bImage)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_bImage(void *, int);}
static void release_bImage(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<bImage *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_bImage(sipSimpleWrapper *);}
static void dealloc_bImage(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_bImage(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_bImage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_bImage(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    bImage *sipCpp = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        int a5;
        int a6;
        int a7;
        QString * a8;
        int a8State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iiiiiiiiJ1", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, sipType_QString,&a8, &a8State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new bImage(a0,a1,a2,a3,a4,a5,a6,a7,*a8);
            Py_END_ALLOW_THREADS
            sipReleaseType(a8,sipType_QString,a8State);

            return sipCpp;
        }
    }

    {
        const bImage * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_bImage, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new bImage(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_bImage[] = {
    {SIP_MLNAME_CAST(sipName_DELETEME), meth_bImage_DELETEME, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDrawH), meth_bImage_getDrawH, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDrawW), meth_bImage_getDrawW, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getFilename), meth_bImage_getFilename, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getH), meth_bImage_getH, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getHidden), meth_bImage_getHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getId), meth_bImage_getId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLayer), meth_bImage_getLayer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTile), meth_bImage_getTile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTilesetH), meth_bImage_getTilesetH, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTilesetId), meth_bImage_getTilesetId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTilesetW), meth_bImage_getTilesetW, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getW), meth_bImage_getW, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getX), meth_bImage_getX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getY), meth_bImage_getY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDrawH), meth_bImage_setDrawH, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDrawW), meth_bImage_setDrawW, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setH), meth_bImage_setH, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHidden), meth_bImage_setHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayer), meth_bImage_setLayer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTile), meth_bImage_setTile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setW), meth_bImage_setW, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setX), meth_bImage_setX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setY), meth_bImage_setY, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef__bmainmod_bImage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_bImage,
        {0}
    },
    {
        sipNameNr_bImage,
        {0, 0, 1},
        24, methods_bImage,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_bImage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_bImage,
    0,
    0,
    0,
    release_bImage,
    cast_bImage,
    0,
    0,
    0
},
    0,
    0,
    0
};

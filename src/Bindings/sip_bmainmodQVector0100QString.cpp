/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.1 on Fri Dec 24 17:16:24 2010
 */

#include "sipAPI_bmainmod.h"

#line 38 "/usr/share/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 12 "sip_bmainmodQVector0100QString.cpp"

#line 82 "/usr/share/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "sip_bmainmodQVector0100QString.cpp"
#line 41 "/usr/share/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 19 "sip_bmainmodQVector0100QString.cpp"


extern "C" {static void assign_QVector_0100QString(void *, SIP_SSIZE_T, const void *);}
static void assign_QVector_0100QString(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QVector<QString> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QVector<QString> *>(sipSrc);
}


extern "C" {static void *array_QVector_0100QString(SIP_SSIZE_T);}
static void *array_QVector_0100QString(SIP_SSIZE_T sipNrElem)
{
    return new QVector<QString>[sipNrElem];
}


extern "C" {static void *copy_QVector_0100QString(const void *, SIP_SSIZE_T);}
static void *copy_QVector_0100QString(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QVector<QString>(reinterpret_cast<const QVector<QString> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_QVector_0100QString(void *, int);}
static void release_QVector_0100QString(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast<QVector<QString> *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_QVector_0100QString(PyObject *, void **, int *, PyObject *);}
static int convertTo_QVector_0100QString(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QVector<QString> **sipCppPtr = reinterpret_cast<QVector<QString> **>(sipCppPtrV);

#line 69 "/usr/share/sip/QtCore/qvector.sip"
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!sipCanConvertToType(PyList_GET_ITEM(sipPy, i), sipType_QString, SIP_NOT_NONE))
                return 0;

        return 1;
    }

    QVector<QString> *qv = new QVector<QString>;
 
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        int state;
        QString *t = reinterpret_cast<QString *>(sipConvertToType(PyList_GET_ITEM(sipPy, i), sipType_QString, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));
 
        if (*sipIsErr)
        {
            sipReleaseType(t, sipType_QString, state);

            delete qv;
            return 0;
        }

        qv->append(*t);

        sipReleaseType(t, sipType_QString, state);
    }
 
    *sipCppPtr = qv;
 
    return sipGetState(sipTransferObj);
#line 96 "sip_bmainmodQVector0100QString.cpp"
}


extern "C" {static PyObject *convertFrom_QVector_0100QString(void *, PyObject *);}
static PyObject *convertFrom_QVector_0100QString(void *sipCppV,PyObject *sipTransferObj)
{
   QVector<QString> *sipCpp = reinterpret_cast<QVector<QString> *>(sipCppV);

#line 42 "/usr/share/sip/QtCore/qvector.sip"
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QString *t = new QString(sipCpp->at(i));
        PyObject *tobj;

        if ((tobj = sipConvertFromNewType(t, sipType_QString, sipTransferObj)) == NULL)
        {
            Py_DECREF(l);
            delete t;

            return NULL;
        }

        PyList_SET_ITEM(l, i, tobj);
    }

    return l;
#line 130 "sip_bmainmodQVector0100QString.cpp"
}


sipMappedTypeDef sipTypeDef__bmainmod_QVector_0100QString = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_130,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_QVector_0100QString,
    array_QVector_0100QString,
    copy_QVector_0100QString,
    release_QVector_0100QString,
    convertTo_QVector_0100QString,
    convertFrom_QVector_0100QString
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.11.1 on Fri Dec 24 17:16:24 2010
 */

#include "sipAPI_bmainmod.h"

#line 31 "bMain.sip"
#include "bMain.h"
#line 12 "sip_bmainmodbMain.cpp"

#line 38 "/usr/share/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 16 "sip_bmainmodbMain.cpp"
#line 40 "/usr/share/sip/QtCore/qrect.sip"
#include <qrect.h>
#line 19 "sip_bmainmodbMain.cpp"
#line 41 "/usr/share/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 22 "sip_bmainmodbMain.cpp"
#line 40 "/usr/share/sip/QtGui/qmainwindow.sip"
#include <qmainwindow.h>
#line 25 "sip_bmainmodbMain.cpp"
#line 38 "/usr/share/sip/QtCore/qvector.sip"
#include <qvector.h>
#line 28 "sip_bmainmodbMain.cpp"
#line 82 "/usr/share/sip/QtCore/qstring.sip"
#include <qstring.h>
#line 31 "sip_bmainmodbMain.cpp"
#line 36 "/usr/share/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34 "sip_bmainmodbMain.cpp"
#line 315 "/usr/share/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 37 "sip_bmainmodbMain.cpp"
#line 303 "/usr/share/sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 40 "sip_bmainmodbMain.cpp"
#line 39 "/usr/share/sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sip_bmainmodbMain.cpp"
#line 41 "/usr/share/sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "sip_bmainmodbMain.cpp"
#line 38 "/usr/share/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sip_bmainmodbMain.cpp"
#line 42 "/usr/share/sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "sip_bmainmodbMain.cpp"
#line 40 "/usr/share/sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sip_bmainmodbMain.cpp"
#line 125 "/usr/share/sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sip_bmainmodbMain.cpp"
#line 36 "/usr/share/sip/QtCore/qthread.sip"
#include <qthread.h>
#line 61 "sip_bmainmodbMain.cpp"
#line 40 "/usr/share/sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 64 "sip_bmainmodbMain.cpp"
#line 36 "/usr/share/sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 67 "sip_bmainmodbMain.cpp"


class sipbMain : public bMain
{
public:
    sipbMain();
    virtual ~sipbMain();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    QObject * sipProtect_sender() const;
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipbMain(const sipbMain &);
    sipbMain &operator = (const sipbMain &);

    char sipPyMethods[7];
};

sipbMain::sipbMain(): bMain(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipbMain::~sipbMain()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipbMain::metaObject() const
{
    return sip__bmainmod_qt_metaobject(sipPySelf,sipType_bMain);
}

int sipbMain::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = bMain::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip__bmainmod_qt_metacall(sipPySelf,sipType_bMain,_c,_id,_a);

    return _id;
}

void *sipbMain::qt_metacast(const char *_clname)
{
    return (sip__bmainmod_qt_metacast && sip__bmainmod_qt_metacast(sipPySelf,sipType_bMain,_clname)) ? this : bMain::qt_metacast(_clname);
}

bool sipbMain::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,QEvent *);

    return ((sipVH_QtCore_5)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[5]))(sipGILState,meth,a0);
}

bool sipbMain::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,QObject *,QEvent *);

    return ((sipVH_QtCore_18)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[18]))(sipGILState,meth,a0,a1);
}

void sipbMain::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,QTimerEvent *);

    ((sipVH_QtCore_9)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[9]))(sipGILState,meth,a0);
}

void sipbMain::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_25)(sip_gilstate_t,PyObject *,QChildEvent *);

    ((sipVH_QtCore_25)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[25]))(sipGILState,meth,a0);
}

void sipbMain::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,QEvent *);

    ((sipVH_QtCore_17)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[17]))(sipGILState,meth,a0);
}

void sipbMain::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

void sipbMain::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_24)(sip_gilstate_t,PyObject *,const char *);

    ((sipVH_QtCore_24)(sipModuleAPI__bmainmod_QtCore->em_virthandlers[24]))(sipGILState,meth,a0);
}

QObject * sipbMain::sipProtect_sender() const
{
    return QObject::sender();
}

int sipbMain::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipbMain::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipbMain::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipbMain::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipbMain::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipbMain::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_bMain_sender(PyObject *, PyObject *);}
static PyObject *meth_bMain_sender(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            QObject *sipRes = 0;

#line 529 "/usr/share/sip/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp->sender());
        #else
            sipRes = helper(sipCpp->sipProtect_sender());
        #endif
#line 327 "sip_bmainmodbMain.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_receivers(PyObject *, PyObject *);}
static PyObject *meth_bMain_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        char * a0;
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_bMain, &sipCpp, &a0))
        {
            int sipRes = 0;

#line 546 "/usr/share/sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = helper(sipCpp, a0, sipCpp->receivers(a0));
        #else
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
        #endif
#line 369 "sip_bmainmodbMain.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_bMain_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_bMain, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_childEvent(PyObject *, PyObject *);}
static PyObject *meth_bMain_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_bMain, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_customEvent(PyObject *, PyObject *);}
static PyObject *meth_bMain_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_bMain, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_bMain_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_bMain, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_bMain_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipbMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BG", &sipSelf, sipType_bMain, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_start(PyObject *, PyObject *);}
static PyObject *meth_bMain_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_start, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_displayUserDialogChoice(PyObject *, PyObject *);}
static PyObject *meth_bMain_displayUserDialogChoice(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString * a0;
        int a0State = 0;
        QVector<QString> * a1;
        int a1State = 0;
        int a2 = 0;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1|i", &sipSelf, sipType_bMain, &sipCpp, sipType_QString,&a0, &a0State, sipType_QVector_0100QString,&a1, &a1State, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->displayUserDialogChoice(*a0,*a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QVector_0100QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_displayUserDialogChoice, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_showPopupMenuAt(PyObject *, PyObject *);}
static PyObject *meth_bMain_showPopupMenuAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QVector<QString> * a2;
        int a2State = 0;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_bMain, &sipCpp, &a0, &a1, sipType_QVector_0100QString,&a2, &a2State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->showPopupMenuAt(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QVector_0100QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_showPopupMenuAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_showPopupMenuAtAbs(PyObject *, PyObject *);}
static PyObject *meth_bMain_showPopupMenuAtAbs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        QVector<QString> * a2;
        int a2State = 0;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiiJ1", &sipSelf, sipType_bMain, &sipCpp, &a0, &a1, sipType_QVector_0100QString,&a2, &a2State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->showPopupMenuAtAbs(a0,a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a2,sipType_QVector_0100QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_showPopupMenuAtAbs, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_displayTooltip(PyObject *, PyObject *);}
static PyObject *meth_bMain_displayTooltip(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString * a0;
        int a0State = 0;
        int a1;
        int a2;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1ii", &sipSelf, sipType_bMain, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->displayTooltip(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_displayTooltip, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getUserTextInput(PyObject *, PyObject *);}
static PyObject *meth_bMain_getUserTextInput(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString * a0;
        int a0State = 0;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_bMain, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->getUserTextInput(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getUserTextInput, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getMainWindow(PyObject *, PyObject *);}
static PyObject *meth_bMain_getMainWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            QMainWindow *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getMainWindow();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMainWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getMainWindow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getCamX(PyObject *, PyObject *);}
static PyObject *meth_bMain_getCamX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getCamX();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getCamX, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getCamY(PyObject *, PyObject *);}
static PyObject *meth_bMain_getCamY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getCamY();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getCamY, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getCamW(PyObject *, PyObject *);}
static PyObject *meth_bMain_getCamW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getCamW();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getCamW, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getCamH(PyObject *, PyObject *);}
static PyObject *meth_bMain_getCamH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getCamH();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getCamH, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_setCam(PyObject *, PyObject *);}
static PyObject *meth_bMain_setCam(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_bMain, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCam(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_setCam, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_adjustCam(PyObject *, PyObject *);}
static PyObject *meth_bMain_adjustCam(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_bMain, &sipCpp, &a0, &a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->adjustCam(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_adjustCam, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_setZoom(PyObject *, PyObject *);}
static PyObject *meth_bMain_setZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_bMain, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_setZoom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getZoom(PyObject *, PyObject *);}
static PyObject *meth_bMain_getZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getZoom();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getZoom, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_changeImage(PyObject *, PyObject *);}
static PyObject *meth_bMain_changeImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString * a0;
        int a0State = 0;
        QString * a1;
        int a1State = 0;
        int a2;
        int a3;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1ii", &sipSelf, sipType_bMain, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, &a2, &a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->changeImage(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_changeImage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getTileCountOfImage(PyObject *, PyObject *);}
static PyObject *meth_bMain_getTileCountOfImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        QString * a0;
        int a0State = 0;
        int a1;
        int a2;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1ii", &sipSelf, sipType_bMain, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getTileCountOfImage(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getTileCountOfImage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_addLine(PyObject *, PyObject *);}
static PyObject *meth_bMain_addLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiiii", &sipSelf, sipType_bMain, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addLine(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_addLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_deleteLine(PyObject *, PyObject *);}
static PyObject *meth_bMain_deleteLine(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = -1;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii|i", &sipSelf, sipType_bMain, &sipCpp, &a0, &a1, &a2, &a3, &a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->deleteLine(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_deleteLine, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_clearLines(PyObject *, PyObject *);}
static PyObject *meth_bMain_clearLines(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_bMain, &sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearLines();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_clearLines, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_bMain_getLineOfThickness(PyObject *, PyObject *);}
static PyObject *meth_bMain_getLineOfThickness(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        bMain *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_bMain, &sipCpp, &a0))
        {
            QVector<QRect> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector<QRect>(sipCpp->getLineOfThickness(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_bMain, sipName_getLineOfThickness, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_bMain(void *, const sipTypeDef *);}
static void *cast_bMain(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_bMain)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(bMain *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_bMain(void *, int);}
static void release_bMain(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipbMain *>(sipCppV);
    else
        delete reinterpret_cast<bMain *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_bMain(sipSimpleWrapper *);}
static void dealloc_bMain(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipbMain *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_bMain(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_bMain(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_bMain(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipbMain *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipbMain();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_bMain[] = {{130, 0, 1}};


static PyMethodDef methods_bMain[] = {
    {SIP_MLNAME_CAST(sipName_addLine), meth_bMain_addLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_adjustCam), meth_bMain_adjustCam, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeImage), meth_bMain_changeImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_bMain_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearLines), meth_bMain_clearLines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_bMain_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_bMain_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteLine), meth_bMain_deleteLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_bMain_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_displayTooltip), meth_bMain_displayTooltip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_displayUserDialogChoice), meth_bMain_displayUserDialogChoice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCamH), meth_bMain_getCamH, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCamW), meth_bMain_getCamW, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCamX), meth_bMain_getCamX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCamY), meth_bMain_getCamY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getLineOfThickness), meth_bMain_getLineOfThickness, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getMainWindow), meth_bMain_getMainWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTileCountOfImage), meth_bMain_getTileCountOfImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getUserTextInput), meth_bMain_getUserTextInput, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getZoom), meth_bMain_getZoom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_bMain_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), meth_bMain_sender, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCam), meth_bMain_setCam, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setZoom), meth_bMain_setZoom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showPopupMenuAt), meth_bMain_showPopupMenuAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showPopupMenuAtAbs), meth_bMain_showPopupMenuAtAbs, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_start), meth_bMain_start, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_bMain_timerEvent, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_bMain[] = {
    {"enterEventSignal()", 0, 0},
    {"leaveEventSignal()", 0, 0},
    {"mouseReleaseSignal(int,int,int)", 0, 0},
    {"mousePressSignal(int,int,int)", 0, 0},
    {"mouseMoveSignal(int,int)", 0, 0},
    {0, 0, 0}
};


pyqt4ClassTypeDef sipTypeDef__bmainmod_bMain = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_bMain,
        {0}
    },
    {
        sipNameNr_bMain,
        {0, 0, 1},
        28, methods_bMain,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_bMain,
    0,
    init_bMain,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_bMain,
    0,
    0,
    0,
    release_bMain,
    cast_bMain,
    0,
    0,
    0
},
    &bMain::staticMetaObject,
    0,
    pyqt4_signals_bMain
};
